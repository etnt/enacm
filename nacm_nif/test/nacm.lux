[doc Test standard NACM validation functionality]

[include common.luxinc]

[shell nacm_tests]
    -$fail_pattern
    [invoke log "Starting standard NACM NIF validation tests"]
    !erl -pa ../_build/default/lib/*/ebin
    ?$eprompt

    # Test 1: Permit example with jsx encoding
    [invoke log "Test 1: Admin user permit example (jsx)"]
    !{Permitted1, ShouldLog1} = nacm_nif_example:permit_example().
    !io:format("Test 1 result: permitted=~p, should_log=~p~n", [Permitted1, ShouldLog1]).
    ?Test 1 result: permitted=true, should_log=false
    ?$eprompt

    # Test 2: Deny example with jsx encoding  
    [invoke log "Test 2: Guest user deny example (jsx)"]
    !{Permitted2, ShouldLog2} = nacm_nif_example:deny_example().
    !io:format("Test 2 result: permitted=~p, should_log=~p~n", [Permitted2, ShouldLog2]).
    ?Test 2 result: permitted=false, should_log=false
    ?$eprompt

    # Test 3: Permit example with manual JSON encoding
    [invoke log "Test 3: Admin user permit example (manual JSON)"]
    !{Permitted3, ShouldLog3} = nacm_nif_example:permit_example_manual().
    !io:format("Test 3 result: permitted=~p, should_log=~p~n", [Permitted3, ShouldLog3]).
    ?Test 3 result: permitted=true, should_log=false
    ?$eprompt

    # Test 4: Deny example with manual JSON encoding
    [invoke log "Test 4: Guest user deny example (manual JSON)"]
    !{Permitted4, ShouldLog4} = nacm_nif_example:deny_example_manual().
    !io:format("Test 4 result: permitted=~p, should_log=~p~n", [Permitted4, ShouldLog4]).
    ?Test 4 result: permitted=false, should_log=false
    ?$eprompt

    # Test 5: Direct API usage - valid request
    [invoke log "Test 5: Direct API call - valid admin request"]
    ~Config = "<config xmlns=\"urn:ietf:params:xml:ns:yang:ietf-netconf-acm\">
    ~<nacm>
    ~<enable-nacm>true</enable-nacm>
    ~<read-default>deny</read-default>
    ~<write-default>deny</write-default>
    ~<exec-default>deny</exec-default>
    ~<groups>
    ~<group>
    ~<name>admin</name>
    ~<user-name>admin</user-name>
    ~</group>
    ~</groups>
    ~<rule-list>
    ~<name>admin-rules</name>
    ~<group>admin</group>
    ~<rule>
    ~<name>permit-admin-exec</name>
    ~<access-operations>exec</access-operations>
    ~<action>permit</action>
    ~<rpc-name>edit-config</rpc-name>
    ~</rule>
    ~</rule-list>
    ~</nacm>
    !</config>".
    ?$eprompt
    !Request = "{\"user\":\"admin\",\"module_name\":null,\"rpc_name\":\"edit-config\",\"operation\":\"exec\",\"path\":null}".
    ?$eprompt
    !{Permitted5, ShouldLog5} = nacm_nif:validate(list_to_binary(Config), list_to_binary(Request)).
    !io:format("Test 5 result: permitted=~p, should_log=~p~n", [Permitted5, ShouldLog5]).
    ?Test 5 result: permitted=true, should_log=false
    ?$eprompt

    # Test 6: Direct API usage - invalid request
    [invoke log "Test 6: Direct API call - invalid guest request"]
    !RequestGuest = "{\"user\":\"guest\",\"module_name\":null,\"rpc_name\":\"edit-config\",\"operation\":\"exec\",\"path\":null}".
    ?$eprompt
    !{Permitted6, ShouldLog6} = nacm_nif:validate(list_to_binary(Config), list_to_binary(RequestGuest)).
    !io:format("Test 6 result: permitted=~p, should_log=~p~n", [Permitted6, ShouldLog6]).
    ?Test 6 result: permitted=false, should_log=false
    ?$eprompt

    # Test 7: Error handling - invalid XML config
    [invoke log "Test 7: Error handling - invalid XML config"]
    !BadConfig = "invalid xml".
    ?$eprompt
    !{Permitted7, ShouldLog7} = nacm_nif:validate(list_to_binary(BadConfig), list_to_binary(Request)).
    !io:format("Test 7 invalid XML result: permitted=~p, should_log=~p~n", [Permitted7, ShouldLog7]).
    ?Test 7 invalid XML result: permitted=false, should_log=false
    ?$eprompt

    # Test 8: Error handling - invalid JSON request
    [invoke log "Test 8: Error handling - invalid JSON request"]
    !BadRequest = "invalid json".
    ?$eprompt
    !{Permitted8, ShouldLog8} = nacm_nif:validate(list_to_binary(Config), list_to_binary(BadRequest)).
    !io:format("Test 8 invalid JSON result: permitted=~p, should_log=~p~n", [Permitted8, ShouldLog8]).
    ?Test 8 invalid JSON result: permitted=false, should_log=false
    ?$eprompt

    # Test 9: jsx encoding verification - ensure binaries work correctly
    [invoke log "Test 9: jsx binary vs string encoding verification"]
    !BinaryMap = #{user => <<"admin">>, rpc_name => <<"edit-config">>, operation => <<"exec">>, module_name => null, path => null}.
    ?$eprompt
    !JsonBinary = jsx:encode(BinaryMap).
    ?$eprompt
    !{Permitted9, ShouldLog9} = nacm_nif:validate(list_to_binary(Config), JsonBinary).
    !io:format("Test 9 jsx binary result: permitted=~p, should_log=~p~n", [Permitted9, ShouldLog9]).
    ?Test 9 jsx binary result: permitted=true, should_log=false
    ?$eprompt

    # Test 10: Unknown user should be denied (not in admin group)
    [invoke log "Test 10: Unknown user 'bill' should be denied"]
    !UnknownUserRequest = "{\"user\":\"bill\",\"module_name\":null,\"rpc_name\":\"edit-config\",\"operation\":\"exec\",\"path\":null}".
    ?$eprompt
    !{Permitted10, ShouldLog10} = nacm_nif:validate(list_to_binary(Config), list_to_binary(UnknownUserRequest)).
    !io:format("Test 10 unknown user result: permitted=~p, should_log=~p~n", [Permitted10, ShouldLog10]).
    ?Test 10 unknown user result: permitted=false, should_log=false
    ?$eprompt

    # Test 11: Different RPC operation should be denied (not in rules)
    [invoke log "Test 11: Different RPC operation should be denied"]
    !DifferentRpcRequest = "{\"user\":\"admin\",\"module_name\":null,\"rpc_name\":\"get-config\",\"operation\":\"exec\",\"path\":null}".
    ?$eprompt
    !{Permitted11, ShouldLog11} = nacm_nif:validate(list_to_binary(Config), list_to_binary(DifferentRpcRequest)).
    !io:format("Test 11 different RPC result: permitted=~p, should_log=~p~n", [Permitted11, ShouldLog11]).
    ?Test 11 different RPC result: permitted=false, should_log=false
    ?$eprompt

    # Test 12: Cache functionality
    [invoke log "Test 12: Cache functionality - set config and use cached validation"]
    !nacm_nif:set_config(list_to_binary(Config)).
    ?$eprompt
    !{Permitted12a, ShouldLog12a} = nacm_nif:validate_with_cache(list_to_binary(Request)).
    !io:format("Test 12a cached admin result: permitted=~p, should_log=~p~n", [Permitted12a, ShouldLog12a]).
    ?Test 12a cached admin result: permitted=true, should_log=false
    ?$eprompt
    !{Permitted12b, ShouldLog12b} = nacm_nif:validate_with_cache(list_to_binary(RequestGuest)).
    !io:format("Test 12b cached guest result: permitted=~p, should_log=~p~n", [Permitted12b, ShouldLog12b]).
    ?Test 12b cached guest result: permitted=false, should_log=false
    ?$eprompt

    # Test 13: Empty config leverages cache (validate/2 with empty config)
    [invoke log "Test 13: Empty config leverages cached configuration"]
    # First ensure we have a config cached from previous test
    !{Permitted13a, ShouldLog13a} = nacm_nif:validate(list_to_binary(Config), list_to_binary(Request)).
    !io:format("Test 13a cache refresh result: permitted=~p, should_log=~p~n", [Permitted13a, ShouldLog13a]).
    ?Test 13a cache refresh result: permitted=true, should_log=false
    ?$eprompt
    # Now use empty config - should use cached config
    !{Permitted13b, ShouldLog13b} = nacm_nif:validate(<<>>, list_to_binary(Request)).
    !io:format("Test 13b empty config result: permitted=~p, should_log=~p~n", [Permitted13b, ShouldLog13b]).
    ?Test 13b empty config result: permitted=true, should_log=false
    ?$eprompt
    # Test with guest user using empty config (should be denied by cached rules)
    !{Permitted13c, ShouldLog13c} = nacm_nif:validate(<<>>, list_to_binary(RequestGuest)).
    !io:format("Test 13c empty config guest result: permitted=~p, should_log=~p~n", [Permitted13c, ShouldLog13c]).
    ?Test 13c empty config guest result: permitted=false, should_log=false
    ?$eprompt
    # Test that cache persists for subsequent empty config calls
    !{Permitted13d, ShouldLog13d} = nacm_nif:validate(<<>>, list_to_binary(Request)).
    !io:format("Test 13d cache persistence result: permitted=~p, should_log=~p~n", [Permitted13d, ShouldLog13d]).
    ?Test 13d cache persistence result: permitted=true, should_log=false
    ?$eprompt

    # Test 14: Cache update when rules change
    [invoke log "Test 14: Cache update when NACM rules change"]
    # Create a different config that denies admin operations
    ~NewConfig = "<config xmlns=\"urn:ietf:params:xml:ns:yang:ietf-netconf-acm\">
    ~<nacm>
    ~<enable-nacm>true</enable-nacm>
    ~<read-default>deny</read-default>
    ~<write-default>deny</write-default>
    ~<exec-default>deny</exec-default>
    ~<groups>
    ~<group>
    ~<name>admin</name>
    ~<user-name>admin</user-name>
    ~</group>
    ~</groups>
    ~<rule-list>
    ~<name>admin-deny-rules</name>
    ~<group>admin</group>
    ~<rule>
    ~<name>deny-admin-exec</name>
    ~<access-operations>exec</access-operations>
    ~<action>deny</action>
    ~<rpc-name>edit-config</rpc-name>
    ~</rule>
    ~</rule-list>
    ~</nacm>
    !</config>".
    ?$eprompt
    # Update cache with new restrictive config
    !{Permitted14a, ShouldLog14a} = nacm_nif:validate(list_to_binary(NewConfig), list_to_binary(Request)).
    !io:format("Test 14a new config result: permitted=~p, should_log=~p~n", [Permitted14a, ShouldLog14a]).
    ?Test 14a new config result: permitted=false, should_log=false
    ?$eprompt
    # Verify cache was updated by using empty config (should use new rules)
    !{Permitted14b, ShouldLog14b} = nacm_nif:validate(<<>>, list_to_binary(Request)).
    !io:format("Test 14b cache update result: permitted=~p, should_log=~p~n", [Permitted14b, ShouldLog14b]).
    ?Test 14b cache update result: permitted=false, should_log=false
    ?$eprompt
    # Verify with validate_with_cache as well
    !{Permitted14c, ShouldLog14c} = nacm_nif:validate_with_cache(list_to_binary(Request)).
    !io:format("Test 14c validate_with_cache result: permitted=~p, should_log=~p~n", [Permitted14c, ShouldLog14c]).
    ?Test 14c validate_with_cache result: permitted=false, should_log=false
    ?$eprompt

    [invoke log "All standard NACM NIF tests completed successfully!"]
    !erlang:halt().

[cleanup]
