[doc Test Tail-f ACM extension functionality]

[include common.luxinc]

[shell tailf_acm_tests]
    -$fail_pattern
    [invoke log "Starting Tail-f ACM extension tests"]
    !erl -pa ../_build/default/lib/*/ebin
    ?$eprompt

    # Test 15: Command rule validation - CLI context
    [invoke log "Test 15: CLI command access control"]
    ~TailfConfig = "<config xmlns=\"http://tail-f.com/ns/config/1.0\">
    ~<nacm xmlns=\"urn:ietf:params:xml:ns:yang:ietf-netconf-acm\">
    ~<enable-nacm>true</enable-nacm>
    ~<read-default>deny</read-default>
    ~<write-default>deny</write-default>
    ~<exec-default>deny</exec-default>
    ~<cmd-read-default xmlns=\"http://tail-f.com/yang/acm\">deny</cmd-read-default>
    ~<cmd-exec-default xmlns=\"http://tail-f.com/yang/acm\">deny</cmd-exec-default>
    ~<groups>
    ~<group>
    ~<name>administrators</name>
    ~<user-name>admin</user-name>
    ~<gid xmlns=\"http://tail-f.com/yang/acm\">999</gid>
    ~</group>
    ~<group>
    ~<name>operators</name>
    ~<user-name>oper</user-name>
    ~<gid xmlns=\"http://tail-f.com/yang/acm\">1000</gid>
    ~</group>
    ~</groups>
    ~<rule-list>
    ~<name>operator-commands</name>
    ~<group>operators</group>
    ~<cmdrule xmlns=\"http://tail-f.com/yang/acm\">
    ~<name>cli-show-status</name>
    ~<context>cli</context>
    ~<command>show status</command>
    ~<access-operations>read exec</access-operations>
    ~<action>permit</action>
    ~</cmdrule>
    ~<cmdrule xmlns=\"http://tail-f.com/yang/acm\">
    ~<name>deny-reboot</name>
    ~<context>*</context>
    ~<command>reboot</command>
    ~<access-operations>exec</access-operations>
    ~<action>deny</action>
    ~</cmdrule>
    ~</rule-list>
    ~<rule-list>
    ~  <name>admin-commands</name>
    ~  <group>administrators</group>
    ~  <cmdrule xmlns=\"http://tail-f.com/yang/acm\">
    ~    <name>allow-reboot</name>
    ~    <context>*</context>
    ~    <command>reboot</command>
    ~    <access-operations>exec</access-operations>
    ~    <action>permit</action>
    ~    <log-if-permit/>
    ~  </cmdrule>
    ~</rule-list>
    ~</nacm>
    !</config>".
    ?$eprompt

    # Test CLI show status command - should be permitted
    !CliShowRequest = "{\"user\":\"oper\",\"module_name\":null,\"rpc_name\":null,\"operation\":\"read\",\"path\":null,\"context\":\"cli\",\"command\":\"show status\"}".
    ?$eprompt
    !{PermittedCli, ShouldLogCli} = nacm_nif:validate(list_to_binary(TailfConfig), list_to_binary(CliShowRequest)).
    !io:format("Test 15 CLI result: permitted=~p, should_log=~p~n", [PermittedCli, ShouldLogCli]).
    ?Test 15 CLI result: permitted=true, should_log=false
    ?$eprompt

    # Test 16: Command rule validation - deny reboot from any context
    [invoke log "Test 16: Deny reboot command from any context"]
    !RebootRequest = "{\"user\":\"oper\",\"module_name\":null,\"rpc_name\":null,\"operation\":\"exec\",\"path\":null,\"context\":\"cli\",\"command\":\"reboot\"}".
    ?$eprompt
    !{PermittedReboot, ShouldLogReboot} = nacm_nif:validate(list_to_binary(TailfConfig), list_to_binary(RebootRequest)).
    !io:format("Test 16 reboot result: permitted=~p, should_log=~p~n", [PermittedReboot, ShouldLogReboot]).
    ?Test 16 reboot result: permitted=false, should_log=false
    ?$eprompt

    # Test reboot from WebUI context - should also be denied
    !RebootWebUIRequest = "{\"user\":\"oper\",\"module_name\":null,\"rpc_name\":null,\"operation\":\"exec\",\"path\":null,\"context\":\"webui\",\"command\":\"reboot\"}".
    ?$eprompt
    !{PermittedWebUIReboot, ShouldLogWebUIReboot} = nacm_nif:validate(list_to_binary(TailfConfig), list_to_binary(RebootWebUIRequest)).
    !io:format("WebUI reboot result: permitted=~p, should_log=~p~n", [PermittedWebUIReboot, ShouldLogWebUIReboot]).
    ?WebUI reboot result: permitted=false, should_log=false
    ?$eprompt

    # admin user can reboot from any context
    [invoke log "Test 16.2: Allow reboot command for admin from any context"]
    !RebootRequest2 = "{\"user\":\"admin\",\"module_name\":null,\"rpc_name\":null,\"operation\":\"exec\",\"path\":null,\"context\":\"cli\",\"command\":\"reboot\"}".
    ?$eprompt
    !{PermittedReboot2, ShouldLogReboot2} = nacm_nif:validate(list_to_binary(TailfConfig), list_to_binary(RebootRequest2)).
    !io:format("Test 16.2 reboot result: permitted=~p, should_log=~p~n", [PermittedReboot2, ShouldLogReboot2]).
    ?Test 16.2 reboot result: permitted=true, should_log=true
    ?$eprompt

    # Test 17: Command rule validation - unknown command uses defaults
    [invoke log "Test 17: Unknown command should use cmd-exec-default (deny)"]
    !UnknownCmdRequest = "{\"user\":\"oper\",\"module_name\":null,\"rpc_name\":null,\"operation\":\"exec\",\"path\":null,\"context\":\"cli\",\"command\":\"unknown-command\"}".
    ?$eprompt
    !{PermittedUnknown, ShouldLogUnknown} = nacm_nif:validate(list_to_binary(TailfConfig), list_to_binary(UnknownCmdRequest)).
    !io:format("Test 17 unknown command result: permitted=~p, should_log=~p~n", [PermittedUnknown, ShouldLogUnknown]).
    ?Test 17 unknown command result: permitted=false, should_log=false
    ?$eprompt

    # Test 18: Context-specific rules
    [invoke log "Test 18: Context-specific access control"]
    # Same user, same command, but different context should be denied (rule specifies CLI only)
    !WebUIShowRequest = "{\"user\":\"oper\",\"module_name\":null,\"rpc_name\":null,\"operation\":\"read\",\"path\":null,\"context\":\"webui\",\"command\":\"show status\"}".
    ?$eprompt
    !{PermittedWebUIShow, ShouldLogWebUIShow} = nacm_nif:validate(list_to_binary(TailfConfig), list_to_binary(WebUIShowRequest)).
    !io:format("Test 18 WebUI show result: permitted=~p, should_log=~p~n", [PermittedWebUIShow, ShouldLogWebUIShow]).
    ?Test 18 WebUI show result: permitted=false, should_log=false
    ?$eprompt

    # Test 19: Wildcard command matching
    [invoke log "Test 19: Wildcard command pattern matching"]
    ~WildcardConfig = "<config xmlns=\"http://tail-f.com/ns/config/1.0\">
    ~<nacm xmlns=\"urn:ietf:params:xml:ns:yang:ietf-netconf-acm\">
    ~<enable-nacm>true</enable-nacm>
    ~<read-default>deny</read-default>
    ~<write-default>deny</write-default>
    ~<exec-default>deny</exec-default>
    ~<cmd-read-default xmlns=\"http://tail-f.com/yang/acm\">deny</cmd-read-default>
    ~<cmd-exec-default xmlns=\"http://tail-f.com/yang/acm\">deny</cmd-exec-default>
    ~<groups>
    ~<group>
    ~<name>users</name>
    ~<user-name>user1</user-name>
    ~</group>
    ~</groups>
    ~<rule-list>
    ~<name>wildcard-commands</name>
    ~<group>users</group>
    ~<cmdrule xmlns=\"http://tail-f.com/yang/acm\">
    ~<name>show-commands</name>
    ~<context>cli</context>
    ~<command>show *</command>
    ~<access-operations>read</access-operations>
    ~<action>permit</action>
    ~</cmdrule>
    ~</rule-list>
    ~</nacm>
    !</config>".
    ?$eprompt

    # Test show interfaces (should match "show *")
    !ShowInterfacesRequest = "{\"user\":\"user1\",\"module_name\":null,\"rpc_name\":null,\"operation\":\"read\",\"path\":null,\"context\":\"cli\",\"command\":\"show interfaces\"}".
    ?$eprompt
    !{PermittedInterfaces, ShouldLogInterfaces} = nacm_nif:validate(list_to_binary(WildcardConfig), list_to_binary(ShowInterfacesRequest)).
    !io:format("Show interfaces result: permitted=~p, should_log=~p~n", [PermittedInterfaces, ShouldLogInterfaces]).
    ?Show interfaces result: permitted=true, should_log=false
    ?$eprompt

    # Test show system status (should match "show *")
    !ShowSystemRequest = "{\"user\":\"user1\",\"module_name\":null,\"rpc_name\":null,\"operation\":\"read\",\"path\":null,\"context\":\"cli\",\"command\":\"show system status\"}".
    ?$eprompt
    !{PermittedSystem, ShouldLogSystem} = nacm_nif:validate(list_to_binary(WildcardConfig), list_to_binary(ShowSystemRequest)).
    !io:format("Show system result: permitted=~p, should_log=~p~n", [PermittedSystem, ShouldLogSystem]).
    ?Show system result: permitted=true, should_log=false
    ?$eprompt

    # Test configure command (should not match "show *")
    !ConfigureRequest = "{\"user\":\"user1\",\"module_name\":null,\"rpc_name\":null,\"operation\":\"exec\",\"path\":null,\"context\":\"cli\",\"command\":\"configure terminal\"}".
    ?$eprompt
    !{PermittedConfigure, ShouldLogConfigure} = nacm_nif:validate(list_to_binary(WildcardConfig), list_to_binary(ConfigureRequest)).
    !io:format("Configure terminal result: permitted=~p, should_log=~p~n", [PermittedConfigure, ShouldLogConfigure]).
    ?Configure terminal result: permitted=false, should_log=false
    ?$eprompt

    # Test 20: Logging functionality with log-if-permit and log-if-deny
    [invoke log "Test 20: Logging functionality - rules with logging flags"]
    ~LoggingConfig = "<config xmlns=\"http://tail-f.com/ns/config/1.0\">
    ~<nacm xmlns=\"urn:ietf:params:xml:ns:yang:ietf-netconf-acm\">
    ~<enable-nacm>true</enable-nacm>
    ~<read-default>deny</read-default>
    ~<write-default>deny</write-default>
    ~<exec-default>deny</exec-default>
    ~<cmd-read-default xmlns=\"http://tail-f.com/yang/acm\">deny</cmd-read-default>
    ~<cmd-exec-default xmlns=\"http://tail-f.com/yang/acm\">deny</cmd-exec-default>
    ~<log-if-default-deny xmlns=\"http://tail-f.com/yang/acm\"/>
    ~<groups>
    ~  <group>
    ~    <name>admin</name>
    ~    <user-name>alice</user-name>
    ~  </group>
    ~</groups>
    ~<rule-list>
    ~  <name>logging-test</name>
    ~  <group>admin</group>
    ~  <cmdrule xmlns=\"http://tail-f.com/yang/acm\">
    ~    <name>permit-with-log</name>
    ~    <context>cli</context>
    ~    <command>show version</command>
    ~    <access-operations>read</access-operations>
    ~    <action>permit</action>
    ~  </cmdrule>
    ~  <cmdrule xmlns=\"http://tail-f.com/yang/acm\">
    ~    <name>cli-help</name>
    ~    <context>cli</context>
    ~    <command>help</command>
    ~    <action>permit</action>
    ~    <log-if-permit/>
    ~  </cmdrule>
    ~  <cmdrule xmlns=\"http://tail-f.com/yang/acm\">
    ~    <name>deny-with-log</name>
    ~    <context>cli</context>
    ~    <command>delete config</command>
    ~    <access-operations>exec</access-operations>
    ~    <action>deny</action>
    ~    <log-if-deny/>
    ~  </cmdrule>
    ~</rule-list>
    ~</nacm>
    !</config>".
    ?$eprompt

    # Test permit with no logging
    !PermitLogRequest = "{\"user\":\"alice\",\"module_name\":null,\"rpc_name\":null,\"operation\":\"read\",\"path\":null,\"context\":\"cli\",\"command\":\"show version\"}".
    ?$eprompt
    !{PermittedShowVersion, ShouldLogShowVersion} = nacm_nif:validate(list_to_binary(LoggingConfig), list_to_binary(PermitLogRequest)).
    !io:format("Test 20 show version result: permitted=~p, should_log=~p~n", [PermittedShowVersion, ShouldLogShowVersion]).
    ?Test 20 show version result: permitted=true, should_log=false
    ?$eprompt

    # Test permit with logging
    !HelpRequest = "{\"user\":\"alice\",\"module_name\":null,\"rpc_name\":null,\"operation\":\"read\",\"path\":null,\"context\":\"cli\",\"command\":\"help\"}".
    ?$eprompt
    !{PermittedHelp, ShouldLogHelp} = nacm_nif:validate(list_to_binary(LoggingConfig), list_to_binary(HelpRequest)).
    !io:format("Help command result: permitted=~p, should_log=~p~n", [PermittedHelp, ShouldLogHelp]).
    ?Help command result: permitted=true, should_log=true
    ?$eprompt

    # Test deny with logging
    !DenyLogRequest = "{\"user\":\"alice\",\"module_name\":null,\"rpc_name\":null,\"operation\":\"exec\",\"path\":null,\"context\":\"cli\",\"command\":\"delete config\"}".
    ?$eprompt
    !{PermittedDeny, ShouldLogDeny} = nacm_nif:validate(list_to_binary(LoggingConfig), list_to_binary(DenyLogRequest)).
    !io:format("Deny with log: permitted=~p, should_log=~p~n", [PermittedDeny, ShouldLogDeny]).
    ?Deny with log: permitted=false, should_log=true
    ?$eprompt

    # Test default policy with logging (unknown command should use defaults)
    !DefaultLogRequest = "{\"user\":\"alice\",\"module_name\":null,\"rpc_name\":null,\"operation\":\"exec\",\"path\":null,\"context\":\"cli\",\"command\":\"unknown command\"}".
    ?$eprompt
    !{PermittedDefault, ShouldLogDefault} = nacm_nif:validate(list_to_binary(LoggingConfig), list_to_binary(DefaultLogRequest)).
    !io:format("Default with log: permitted=~p, should_log=~p~n", [PermittedDefault, ShouldLogDefault]).
    ?Default with log: permitted=false, should_log=true
    ?$eprompt

    [invoke log "All Tail-f ACM extension tests completed successfully!"]
    !erlang:halt().

[cleanup]
